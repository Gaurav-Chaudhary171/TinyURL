// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/tinyurl.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoginService_Login_FullMethodName = "/tinyurl.LoginService/login"
)

// LoginServiceClient is the client API for LoginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Logging service API
type LoginServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type loginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginServiceClient(cc grpc.ClientConnInterface) LoginServiceClient {
	return &loginServiceClient{cc}
}

func (c *loginServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, LoginService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginServiceServer is the server API for LoginService service.
// All implementations must embed UnimplementedLoginServiceServer
// for forward compatibility.
//
// Logging service API
type LoginServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedLoginServiceServer()
}

// UnimplementedLoginServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoginServiceServer struct{}

func (UnimplementedLoginServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedLoginServiceServer) mustEmbedUnimplementedLoginServiceServer() {}
func (UnimplementedLoginServiceServer) testEmbeddedByValue()                      {}

// UnsafeLoginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginServiceServer will
// result in compilation errors.
type UnsafeLoginServiceServer interface {
	mustEmbedUnimplementedLoginServiceServer()
}

func RegisterLoginServiceServer(s grpc.ServiceRegistrar, srv LoginServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoginService_ServiceDesc, srv)
}

func _LoginService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginService_ServiceDesc is the grpc.ServiceDesc for LoginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tinyurl.LoginService",
	HandlerType: (*LoginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _LoginService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tinyurl.proto",
}

const (
	ShortenURL_Shortenurl_FullMethodName = "/tinyurl.ShortenURL/shortenurl"
)

// ShortenURLClient is the client API for ShortenURL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Shortening URL API
type ShortenURLClient interface {
	Shortenurl(ctx context.Context, in *ShortenURLRequest, opts ...grpc.CallOption) (*ShortenURLResponse, error)
}

type shortenURLClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenURLClient(cc grpc.ClientConnInterface) ShortenURLClient {
	return &shortenURLClient{cc}
}

func (c *shortenURLClient) Shortenurl(ctx context.Context, in *ShortenURLRequest, opts ...grpc.CallOption) (*ShortenURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortenURLResponse)
	err := c.cc.Invoke(ctx, ShortenURL_Shortenurl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenURLServer is the server API for ShortenURL service.
// All implementations must embed UnimplementedShortenURLServer
// for forward compatibility.
//
// Shortening URL API
type ShortenURLServer interface {
	Shortenurl(context.Context, *ShortenURLRequest) (*ShortenURLResponse, error)
	mustEmbedUnimplementedShortenURLServer()
}

// UnimplementedShortenURLServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortenURLServer struct{}

func (UnimplementedShortenURLServer) Shortenurl(context.Context, *ShortenURLRequest) (*ShortenURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shortenurl not implemented")
}
func (UnimplementedShortenURLServer) mustEmbedUnimplementedShortenURLServer() {}
func (UnimplementedShortenURLServer) testEmbeddedByValue()                    {}

// UnsafeShortenURLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenURLServer will
// result in compilation errors.
type UnsafeShortenURLServer interface {
	mustEmbedUnimplementedShortenURLServer()
}

func RegisterShortenURLServer(s grpc.ServiceRegistrar, srv ShortenURLServer) {
	// If the following call pancis, it indicates UnimplementedShortenURLServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortenURL_ServiceDesc, srv)
}

func _ShortenURL_Shortenurl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenURLServer).Shortenurl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenURL_Shortenurl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenURLServer).Shortenurl(ctx, req.(*ShortenURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenURL_ServiceDesc is the grpc.ServiceDesc for ShortenURL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenURL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tinyurl.ShortenURL",
	HandlerType: (*ShortenURLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "shortenurl",
			Handler:    _ShortenURL_Shortenurl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tinyurl.proto",
}

const (
	RegisterUser_RegisterUser_FullMethodName = "/tinyurl.RegisterUser/registerUser"
)

// RegisterUserClient is the client API for RegisterUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Register User API
type RegisterUserClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisteredUserResponse, error)
}

type registerUserClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterUserClient(cc grpc.ClientConnInterface) RegisterUserClient {
	return &registerUserClient{cc}
}

func (c *registerUserClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisteredUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisteredUserResponse)
	err := c.cc.Invoke(ctx, RegisterUser_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterUserServer is the server API for RegisterUser service.
// All implementations must embed UnimplementedRegisterUserServer
// for forward compatibility.
//
// Register User API
type RegisterUserServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisteredUserResponse, error)
	mustEmbedUnimplementedRegisterUserServer()
}

// UnimplementedRegisterUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegisterUserServer struct{}

func (UnimplementedRegisterUserServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisteredUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedRegisterUserServer) mustEmbedUnimplementedRegisterUserServer() {}
func (UnimplementedRegisterUserServer) testEmbeddedByValue()                      {}

// UnsafeRegisterUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterUserServer will
// result in compilation errors.
type UnsafeRegisterUserServer interface {
	mustEmbedUnimplementedRegisterUserServer()
}

func RegisterRegisterUserServer(s grpc.ServiceRegistrar, srv RegisterUserServer) {
	// If the following call pancis, it indicates UnimplementedRegisterUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RegisterUser_ServiceDesc, srv)
}

func _RegisterUser_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterUserServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterUser_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterUserServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterUser_ServiceDesc is the grpc.ServiceDesc for RegisterUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tinyurl.RegisterUser",
	HandlerType: (*RegisterUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerUser",
			Handler:    _RegisterUser_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tinyurl.proto",
}

const (
	ExtendedURL_ExtendURL_FullMethodName = "/tinyurl.ExtendedURL/extendURL"
)

// ExtendedURLClient is the client API for ExtendedURL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Extending URL API
type ExtendedURLClient interface {
	ExtendURL(ctx context.Context, in *ExtendURLRequest, opts ...grpc.CallOption) (*ExtendURLResponse, error)
}

type extendedURLClient struct {
	cc grpc.ClientConnInterface
}

func NewExtendedURLClient(cc grpc.ClientConnInterface) ExtendedURLClient {
	return &extendedURLClient{cc}
}

func (c *extendedURLClient) ExtendURL(ctx context.Context, in *ExtendURLRequest, opts ...grpc.CallOption) (*ExtendURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtendURLResponse)
	err := c.cc.Invoke(ctx, ExtendedURL_ExtendURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtendedURLServer is the server API for ExtendedURL service.
// All implementations must embed UnimplementedExtendedURLServer
// for forward compatibility.
//
// Extending URL API
type ExtendedURLServer interface {
	ExtendURL(context.Context, *ExtendURLRequest) (*ExtendURLResponse, error)
	mustEmbedUnimplementedExtendedURLServer()
}

// UnimplementedExtendedURLServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExtendedURLServer struct{}

func (UnimplementedExtendedURLServer) ExtendURL(context.Context, *ExtendURLRequest) (*ExtendURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendURL not implemented")
}
func (UnimplementedExtendedURLServer) mustEmbedUnimplementedExtendedURLServer() {}
func (UnimplementedExtendedURLServer) testEmbeddedByValue()                     {}

// UnsafeExtendedURLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtendedURLServer will
// result in compilation errors.
type UnsafeExtendedURLServer interface {
	mustEmbedUnimplementedExtendedURLServer()
}

func RegisterExtendedURLServer(s grpc.ServiceRegistrar, srv ExtendedURLServer) {
	// If the following call pancis, it indicates UnimplementedExtendedURLServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExtendedURL_ServiceDesc, srv)
}

func _ExtendedURL_ExtendURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtendedURLServer).ExtendURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtendedURL_ExtendURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtendedURLServer).ExtendURL(ctx, req.(*ExtendURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExtendedURL_ServiceDesc is the grpc.ServiceDesc for ExtendedURL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtendedURL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tinyurl.ExtendedURL",
	HandlerType: (*ExtendedURLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "extendURL",
			Handler:    _ExtendedURL_ExtendURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tinyurl.proto",
}
