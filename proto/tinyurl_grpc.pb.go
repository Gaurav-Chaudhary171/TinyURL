// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/tinyurl.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TinyURLService_ShortenURL_FullMethodName   = "/proto.TinyURLService/ShortenURL"
	TinyURLService_ExtendURL_FullMethodName    = "/proto.TinyURLService/ExtendURL"
	TinyURLService_RegisterUser_FullMethodName = "/proto.TinyURLService/RegisterUser"
	TinyURLService_Login_FullMethodName        = "/proto.TinyURLService/Login"
)

// TinyURLServiceClient is the client API for TinyURLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TinyURLServiceClient interface {
	// URL shortening service
	ShortenURL(ctx context.Context, in *ShortenURLRequest, opts ...grpc.CallOption) (*ShortenURLResponse, error)
	ExtendURL(ctx context.Context, in *ExtendURLRequest, opts ...grpc.CallOption) (*ExtendURLResponse, error)
	// User management service
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type tinyURLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTinyURLServiceClient(cc grpc.ClientConnInterface) TinyURLServiceClient {
	return &tinyURLServiceClient{cc}
}

func (c *tinyURLServiceClient) ShortenURL(ctx context.Context, in *ShortenURLRequest, opts ...grpc.CallOption) (*ShortenURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortenURLResponse)
	err := c.cc.Invoke(ctx, TinyURLService_ShortenURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyURLServiceClient) ExtendURL(ctx context.Context, in *ExtendURLRequest, opts ...grpc.CallOption) (*ExtendURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtendURLResponse)
	err := c.cc.Invoke(ctx, TinyURLService_ExtendURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyURLServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, TinyURLService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyURLServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, TinyURLService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TinyURLServiceServer is the server API for TinyURLService service.
// All implementations must embed UnimplementedTinyURLServiceServer
// for forward compatibility.
type TinyURLServiceServer interface {
	// URL shortening service
	ShortenURL(context.Context, *ShortenURLRequest) (*ShortenURLResponse, error)
	ExtendURL(context.Context, *ExtendURLRequest) (*ExtendURLResponse, error)
	// User management service
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedTinyURLServiceServer()
}

// UnimplementedTinyURLServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTinyURLServiceServer struct{}

func (UnimplementedTinyURLServiceServer) ShortenURL(context.Context, *ShortenURLRequest) (*ShortenURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenURL not implemented")
}
func (UnimplementedTinyURLServiceServer) ExtendURL(context.Context, *ExtendURLRequest) (*ExtendURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendURL not implemented")
}
func (UnimplementedTinyURLServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedTinyURLServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedTinyURLServiceServer) mustEmbedUnimplementedTinyURLServiceServer() {}
func (UnimplementedTinyURLServiceServer) testEmbeddedByValue()                        {}

// UnsafeTinyURLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TinyURLServiceServer will
// result in compilation errors.
type UnsafeTinyURLServiceServer interface {
	mustEmbedUnimplementedTinyURLServiceServer()
}

func RegisterTinyURLServiceServer(s grpc.ServiceRegistrar, srv TinyURLServiceServer) {
	// If the following call pancis, it indicates UnimplementedTinyURLServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TinyURLService_ServiceDesc, srv)
}

func _TinyURLService_ShortenURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyURLServiceServer).ShortenURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyURLService_ShortenURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyURLServiceServer).ShortenURL(ctx, req.(*ShortenURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyURLService_ExtendURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyURLServiceServer).ExtendURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyURLService_ExtendURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyURLServiceServer).ExtendURL(ctx, req.(*ExtendURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyURLService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyURLServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyURLService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyURLServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyURLService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyURLServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyURLService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyURLServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TinyURLService_ServiceDesc is the grpc.ServiceDesc for TinyURLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TinyURLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TinyURLService",
	HandlerType: (*TinyURLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShortenURL",
			Handler:    _TinyURLService_ShortenURL_Handler,
		},
		{
			MethodName: "ExtendURL",
			Handler:    _TinyURLService_ExtendURL_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _TinyURLService_RegisterUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _TinyURLService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tinyurl.proto",
}
